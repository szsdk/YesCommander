#!/usr/bin/env python
import term
from getkey import getkey, keys
import sys
import os
import pyperclip
from pathlib import Path
import pkg_resources
import yescommander as yc

_CONFIG_PATH = Path("~/.config/yescommander/").expanduser()
sys.path.insert(0, str(_CONFIG_PATH))


def init_config_folder():
    import os

    if not _CONFIG_PATH.exists():
        _CONFIG_PATH.mkdir(parents=True, exist_ok=True)
    config_file = _CONFIG_PATH / "yc_rc.py"

    if not config_file.exists():
        init_cfg_path = pkg_resources.resource_filename("yescommander", "example/rc.py")
        print(f"==== initalize {str(config_file)} ====")
        with open(init_cfg_path, "r") as fp:
            print(fp.read())
        os.system(f"cp {init_cfg_path} {config_file}")
    exit()


try:
    import yc_rc
except ModuleNotFoundError:
    init_config_folder()


_COMMANDS = yc_rc.commander


def update(listbox, text):
    listbox.commands = _COMMANDS.match(text.split(" "))


def execute(choices):
    choices.commands[choices.getSelected()].result()
    exit()


def copy(choices):
    pyperclip.copy(choices.commands[choices.getSelected()].copy_clipboard())
    exit()


def preview_to_text(pv):
    ans = []
    for k, v in pv.items():
        ans.append(yc.StyledStr(k, color=yc.theme.detail.title_color))
        ans.append(v)
    return ans


def main_loop():
    while True:
        key = getkey()
        if key == keys.ENTER:
            win.clear()
            execute(choices)
        elif key in ["\t", keys.DOWN, b"\x0e".decode()]:
            choices.selectNext()
        elif key in [b"\x1b[Z".decode(), keys.UP, b"\x10".decode()]:
            choices.selectPrevious()
        elif key == b"\x04".decode():
            copy(choices)
        else:
            textbox.key(key)
            choices._selected = 0
            update(choices, textbox.text)
        textbox.draw()
        term.saveCursor()
        listbox.draw()
        if selection := choices.getSelection():
            labelbox.setText(preview_to_text(selection.preview()))
        else:
            labelbox.setText([])
        labelbox.draw()
        term.restoreCursor()


sizey, sizex = term.getSize()
if sizey < 20 and sizex < 40:
    print("Current window is too small")
    exit()

if sizex > 80:
    height = 15
    label_height = height - 1
    win = yc.Window(height, sizex)

    textbox = yc.TextBox(win, 0)
    choices = yc.ListBoxData()
    listbox = yc.ListBox(choices, win, (1, 0), win.height - 1, width=win.width//2)
    labelbox = yc.LabelBox(
        win, (win.origin[0] + 1, win.origin[1] + win.width // 2), (win.width - win.width//2), label_height
    )
else:
    height = 20 
    label_height = 8
    win = yc.Window(height, sizex)

    textbox = yc.TextBox(win, 0)
    choices = yc.ListBoxData()
    listbox = yc.ListBox(choices, win, (1,0), height - 1 - label_height, width=win.width)
    labelbox = yc.LabelBox(
        win, (win.origin[0] + listbox.height + 1, win.origin[1]), win.width, label_height 
    )

try:
    main_loop()
except KeyboardInterrupt:
    pass
